#ifndef JAM_LEXER_H
#define JAM_LEXER_H

#include <stddef.h>

typedef enum token
{
  tok_eof = 0,
  tok_lparen,
  tok_rparen,
  tok_lbrace,
  tok_rbrace,
  tok_lbracket,
  tok_rbracket,
  tok_comma,
  tok_colon,
  tok_semicolon,
  tok_plus,
  tok_minus,
  tok_star,
  tok_slash,
  tok_equal,
  tok_ampersand,
  tok_pipe,
  tok_exclamation,
  tok_caret,
  tok_percent,
  tok_less_than,
  tok_greater_than,
  tok_period,
  tok_double_colon,
  tok_if,
  tok_else,
  tok_while,
  tok_func,
  tok_return,
  tok_string,
  tok_identifier,
  tok_number,
} Token;

typedef struct location
{
  size_t line;   // Line number in the source code.
  size_t column; // Column number in the source code.
  size_t offset; // Offset in the source code file.
} Location;

typedef struct token_data
{
  Token  type;   // Type of the token.
  char  *lexeme; // The actual text of the token.
  size_t length; // Length of the token text.
} TokenData;

typedef struct lexer
{
  char      *start;          // Pointer to the start of the source code.
  char      *current;        // Pointer to the current position in the source code.
  char      *line_start;     // Pointer to the start of the current line.
  TokenData *tokens;         // Array of tokens generated by the lexer.
  Location  *locations;      // Array of locations corresponding to each token.
  size_t     token_count;    // Number of tokens generated.
  size_t     token_capacity; // Capacity of the tokens array.
  size_t     line_number;    // Current line number in the source code.
} Lexer;

/**
 * Initializes a new Lexer instance.
 *
 * @return Pointer to the newly created Lexer instance.
 */
void lexer_init(Lexer *lexer, const char *source_code);

/**
 * Runs the lexer on the provided source code and generates tokens.
 *
 * @param lexer Pointer to the Lexer instance.
 * @param source_code The source code to be lexed.
 * @return 0 on success, or a negative value on failure.
 */
int lexer_run(Lexer *lexer);

/**
 * Frees the resources allocated by the lexer.
 *
 * @param lexer Pointer to the Lexer instance.
 */
void lexer_free(Lexer *lexer);

/**
 * Return a string representation of the token type.
 *
 * @param type The token type.
 * @return A string representation of the token type.
 */
const char *token_type_to_string(Token type);

#endif // JAM_LEXER_H